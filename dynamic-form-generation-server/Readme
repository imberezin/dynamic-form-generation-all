# Dynamic Form Generation Server

Backend server for a dynamic form generation system that handles form schemas and submissions with a MySQL database.

## Overview

This server provides the backend functionality for a dynamic form generation system, including:

- Storing and retrieving form schemas
- Processing form submissions
- Handling file uploads for form schemas
- Database management for form data

## Tech Stack

- **Node.js** and **Express**: Server framework
- **MySQL**: Database (configured to use filess.io)
- **Multer**: For handling form schema file uploads

## Installation

### Prerequisites

- Node.js (v14 or higher)
- npm or yarn
- MySQL database (project is configured to use filess.io)

### Setup

1. Clone the repository

```bash
git clone <repository-url>
cd dynamic-form-generation-server
```

2. Install dependencies

```bash
npm install
```

3. Start the server

```bash
npm start
```

For development with auto-reload:

```bash
npm run dev
```

The server will run on http://localhost:5000 by default.

## Project Structure

```
dynamic-form-generation-server/
├── config/             # Configuration files
│   ├── config.js       # Database configuration
│   └── database.js     # Database connection & initialization
├── controllers/        # Request handlers
│   ├── schemaController.js     # Form schema controller
│   ├── submissionController.js # Form submission controller
│   └── uploadController.js     # File upload controller
├── routes/             # API routes
│   ├── schemaRoutes.js        # Routes for form schemas
│   ├── submissionRoutes.js    # Routes for form submissions
│   └── uploadRoutes.js        # Routes for file uploads
├── uploads/            # Temporary storage for uploads (created automatically)
├── .env                # Environment variables
├── index.js            # Server entry point
└── package.json        # Package configuration
```

## API Endpoints

### Form Schemas

- `GET /api/schemas/active` - Get the currently active form schema
- `GET /api/schemas` - Get all form schemas
- `POST /api/schemas` - Create a new form schema

### Form Submissions

- `GET /api/submissions` - Get all form submissions
- `POST /api/submissions` - Create a new form submission
- `GET /api/submissions/:id` - Get a specific submission by ID

### File Upload

- `POST /api/upload/schema` - Upload a form schema JSON file

## Database Schema

The application uses two main tables that are automatically created on startup:

### form_schemas

- `id` (INT, PRIMARY KEY) - Auto-incrementing ID
- `title` (VARCHAR) - Form title
- `fields` (JSON) - Form fields configuration
- `active` (BOOLEAN) - Whether this is the active schema
- `created_at` (TIMESTAMP) - Creation timestamp

### submissions

- `id` (INT, PRIMARY KEY) - Auto-incrementing ID
- `form_title` (VARCHAR) - Title of the submitted form
- `data` (JSON) - Form submission data
- `created_at` (TIMESTAMP) - Submission timestamp

## Example Schema Format

```json
{
  "title": "User Registration",
  "fields": [
    {
      "name": "username",
      "label": "Username",
      "type": "text",
      "required": true,
      "minLength": 2
    },
    { "name": "email", "label": "Email", "type": "email", "required": true },
    {
      "name": "password",
      "label": "Password",
      "type": "password",
      "required": true,
      "minLength": 6
    },
    {
      "name": "birthdate",
      "label": "Birthdate",
      "type": "date",
      "required": true
    },
    {
      "name": "gender",
      "label": "Gender",
      "type": "select",
      "options": ["Male", "Female", "Other"],
      "required": true
    }
  ]
}
```

## Environment Variables

Create a `.env` file in the root directory with the following variables:

```
PORT=5000
DB_HOST=mnbx4.h.filess.io
DB_USER=dynamicformgeneration_summerpath
DB_PASSWORD=c1016f865beedad5c25ea8f2a4ef87fdf098f6c5
DB_NAME=dynamicformgeneration_summerpath
DB_PORT=3306
```

## Error Handling

The server implements error handling for:

- Invalid form schema uploads
- Database connection issues
- Missing required fields
- Invalid JSON formats

## License

[MIT](https://opensource.org/licenses/MIT)
